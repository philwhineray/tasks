#!/usr/bin/env python3

import os
import re
import subprocess
import sys
import tempfile

from GoogleTasks import GoogleTasks
import Matcher
import Project
import Task

help = """
Usage: task COMMAND [OPTION...] WORDS...

task - task management via google task api

COMMAND:
    list   - List tasks
    add    - Add a task
    rename - Rename task
    done   - Mark as complete
    undo   - Mark as incomplete
    delete - Remove task
    edit   - Edit task
    bulk   - Bulk move / re-order tasks

OPTION:
    -P or -p        - Operate at whole-project level
    -f              - Apply operation without confirmation
    -v              - Verbose (e.g. include notes in list)
    -a              - All (e.g. include completed tasks in list)
    --              - No more simple word matchers follow (e.g. for rename)

WORD:
    Numeric: task ID
    WORD:    regexp
    @TAG:    a tag
    due:TIME        - A due date (also d:TIME)
    project:PROJECT - Work on PROJECT (also p:PROJECT)
"""

optionMap = {
      "-P": "project",
      "-p": "project",
      "-f": "force",
      "-v": "verbose",
      "-a": "all",
      "-z": "debug",
      "-zm": "debugMatching",
      "-h": "help",
      }

def main( argv ):
   # Cleanup up automatically on Ctrl-C
   tempdir = tempfile.TemporaryDirectory( prefix = "task-" )

   configDir = os.environ[ 'HOME' ] + '/.config/tasks'
   cacheDir = os.environ[ 'HOME' ] + '/.cache/tasks'
   appCredentialsFile = configDir + GoogleTasks.appCredentialsFileName

   if not os.path.exists( configDir ):
      os.makedirs( configDir )
   if not os.path.exists( cacheDir ):
      os.makedirs( cacheDir )
   if not os.path.exists( appCredentialsFile ):
      raise RuntimeError( "no credentials file - see README.md#app-authentication",
                          appCredentialsFile )

   options = {}
   words = []
   criteria = Matcher.And()
   command = None
   args = { "tempdir" : tempdir.name }

   commandMap = {
         "add" : doTaskAdd,
         "list" : doTaskList,
         "edit" : doTaskEdit,
         "bulk" : doTasksBulk,
         "rename" : doTaskRename,
         "done" : doTaskDone,
         "undo" : doTaskUndo,
         "tag" : doTaskTag,
         "delete" : doTaskDelete,
         "project-add" : doProjectAdd,
         "project-list" : doProjectList,
         "project-rename" : doProjectRename,
         "project-delete" : doProjectDelete,
         }

   aliasMap = {
         "list" : [ "ls" ],
         "delete" : [ "rm", "del" ],
         "rename" : [ "mv" ],
         "project-list" : [ "project-ls" ],
         "project-delete" : [ "project-rm", "project-del" ],
         "project-rename" : [ "project-mv" ]
         }

   for commandToAlias, aliasList in aliasMap.items():
      for alias in aliasList:
         commandMap[ alias ] = commandMap[ commandToAlias ]

   argv = []
   wordMatchersComplete = False
   for arg in sys.argv:
      if wordMatchersComplete:
         argv.append( arg )
         continue

      if re.match( r"-", arg ):
         if arg == "--":
            wordMatchersComplete = True
            argv.append( arg )
         elif arg in optionMap:
            options[ optionMap[ arg ] ] = True
         else:
            print( "warning: option not recognised: %s" % arg, file=sys.stderr )
      else:
         argv.append( arg )

   if not argv:
      print( help )
      return 0

   command = argv.pop( 0 )
   wordMatchersComplete = command == "add"
   criteria.debug = "debugMatching" in options

   for arg in argv:
      if arg == '--':
         wordMatchersComplete = True
      elif arg == 'or' or arg == 'OR':
         if isinstance( criteria.parent, Matcher.Or ):
            orCriteria = criteria.parent
         else:
            orCriteria = Matcher.Or()
            orCriteria.debug = "debugMatching" in options
            orCriteria.add( criteria )
         criteria = Matcher.And()
         orCriteria.add(criteria )
      elif re.match( r"d(ue)?:", arg ):
         criteria.add( Task.DueMatcher( arg[ arg.index( ":" )+1 : ] ) )
      elif re.match( r"p(roject)?:", arg ):
         criteria.add( Project.WordMatcher( arg[ arg.index( ":" )+1 : ] ) )
      elif wordMatchersComplete:
         words.append( arg )
      elif "project" in options:
         criteria.add( Project.WordMatcher( arg ) )
      else:
         criteria.add( Task.WordMatcher( arg ) )

   while criteria.parent:
      criteria = criteria.parent

   if "project" in options and not re.match( "project-", command ):
      command = "project-" + command

   if command not in commandMap:
      print( help )
      if command:
         print( "error: no such command: %s" % command, file=sys.stderr )
      return 1

   if "help" in options:
      # TODO - per-command help
      print( help )
      return 0

   taskApi = GoogleTasks( configDir, cacheDir )
   taskApi.authenticate()

   commandMap[ command ]( taskApi, options, criteria, words, args )

def getMatchingProjects( taskApi, options, criteria ):
   if criteria.hasInstanceOf( Task.TaskMatcher ):
      raise RuntimeError( "Cannot use task criteria with this action" )
   projects = taskApi.getProjects()
   match = []
   for project in projects:
      if "debugMatching" in options:
         print( "", file=sys.stderr )
         print( "Matching...", project, file=sys.stderr )
      if criteria.match( project ):
         if "debugMatching" in options:
            print( "%s:" % project.shortId, project.apiObject, file=sys.stderr )
         match.append( project )
   return match

def getMatchingProject( taskApi, options, criteria ):
   match = getMatchingProjects( taskApi, options, criteria )
   if len( match ) != 1:
      raise RuntimeError( "Matched %d project(s)" % len( match ) )
   return match[ 0 ]

def getMatchingTasks( taskApi, options, criteria ):
   projects = taskApi.getProjects()
   tasks = set()
   for project in projects:
      tasks |= project.matchingTasks( options, criteria )
   return tasks

def getMatchingTask( taskApi, options, criteria ):
   tasks = list( getMatchingTasks( taskApi, options, criteria ) )
   if len( tasks ) > 1 and "onlyComplete" in options:
      tasks = [ task for task in tasks if task.complete ]
   if len( tasks ) != 1:
      raise RuntimeError( "Matched %d task(s)" % len( tasks ) )
   return tasks[ 0 ]

def doTaskAdd( taskApi, options, criteria, words, args ):
   if criteria.hasInstanceOf( Task.TaskMatcher ):
      raise RuntimeError( "Cannot use task criteria with this action" )
   if not criteria.hasInstanceOf( Project.ProjectMatcher ):
      projectCriteria = [ Project.WordMatcher( "inbox" ) ]
   project = getMatchingProject( taskApi, options, criteria )
   task = project.newTask()
   task.title = " ".join( words )
   task.save()

def doTaskList( taskApi, options, criteria, words, args ):
   Project.write( taskApi.getProjects(), options, criteria )

def doTaskRename( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   if not words:
      raise RuntimeError( "No new title given (use -- to complete criteria)" )
   task.title = ' '.join( words )
   task.save()

def doTaskEdit( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   raise NotImplementedError( "doTasksEdit" )

def doTaskTag( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   # TODO: Add @TAG criteria, remove @-TAG criteria
   raise NotImplementedError( "doTasksTag" )

def doTasksBulk( taskApi, options, criteria, words, args ):
   if options:
      # If options are ever allowed, ensure "all" is still disallowed.
      raise RuntimeError( "bulk: takes no options" )
   if criteria.hasInstanceOf( Task.TaskMatcher ):
      raise RuntimeError( "Cannot use task criteria with this action" )

   projects = taskApi.getProjects()

   taskFilePath = args[ 'tempdir' ] + '/tasks.txt'
   taskFile = open( taskFilePath, 'w')
   with open( taskFilePath, 'w' ) as taskFile:
      options[ "includeEmptyProjects" ] = True
      Project.write( projects, options, criteria, outfile=taskFile )

   subprocess.run( [ os.environ.get( 'EDITOR', 'vi' ), taskFilePath ] )

   with open( taskFilePath, 'r' ) as taskFile:
      Project.read( projects, options, infile=taskFile )

def doTaskDone( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   task.complete = True
   task.save()
   task.print( options=options )

def doTaskUndo( taskApi, options, criteria, words, args ):
   options[ "all" ] = True
   options[ "onlyComplete" ] = True
   task = getMatchingTask( taskApi, options, criteria )
   task.complete = False
   task.save()
   task.print( options=options )

def doTaskDelete( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   task.print( options=options )
   task.delete()

def doProjectAdd( taskApi, options, criteria, words, args ):
   project = Project.Project( ' '.join( words ) )
   taskApi.addProject( project )

def doProjectList( taskApi, options, criteria, words, args ):
   outfile = sys.stdout
   projects = getMatchingProjects( taskApi, options, criteria )
   for project in Project.Project.sort( projects ):
      project.print( options=options, outfile=outfile )

def doProjectRename( taskApi, options, criteria, words, args ):
   project = getMatchingProject( taskApi, options, criteria )
   if len( words ) < 1:
      raise RuntimeError( "No new name given" )
   project.title = ' '.join( words )
   project.save()

def doProjectDelete( taskApi, options, criteria, words, args ):
   def delProject( project, force ):
      if not force:
         print( "delete %s: %s? [y/N]" % ( project.shortId, project ), file=sys.stderr )
         return
      project.delete()
      print( "deleted: %s: %s" % ( project.shortId, project ), file=sys.stderr )

   if not criteria.hasInstanceOf( Project.ProjectMatcher ):
      raise RuntimeError( "must specify project id(s) or name(s)" )
   projects = getMatchingProjects( taskApi, options, criteria )
   for project in projects:
      delProject( project, "force" in options )

if __name__ == '__main__':
   program = sys.argv.pop( 0 )
   status = main( sys.argv )
   if not status:
      status = 0
   sys.exit( status )
