#!/usr/bin/env python3

import os
import re
import subprocess
import sys
import tempfile

from GoogleTasks import GoogleTasks
import Matcher
import Project
import Task

help = """
Usage: task COMMAND [OPTION...] WORDS...

task - task management via google task api

COMMAND:
    list   - List tasks
    add    - Add a task
    rename - Rename task
    done   - Mark as complete
    undo   - Mark as incomplete
    delete - Remove task
    edit   - Edit task
    bulk   - Bulk move / re-order tasks

OPTION:
    -P or -p        - Operate at whole-project level
    -f              - Apply operation without confirmation
    -v              - Verbose (e.g. include notes in list)
    -a              - All (e.g. include completed tasks in list)
    --              - No more simple word matchers follow (e.g. for rename)

WORD:
    Numeric: task ID
    WORD:    regexp
    @TAG:    a tag
    due:TIME        - A due date (also d:TIME)
    project:PROJECT - Work on PROJECT (also p:PROJECT)
"""

optionMap = {
      "-P": "project",
      "-p": "project",
      "-f": "force",
      "-v": "verbose",
      "-a": "all",
      "-z": "debug",
      "-zm": "debugMatching",
      "-h": "help",
      }

savedSearchFile = "/saved-searches"

def main( argv ):
   # Cleanup up automatically on Ctrl-C
   tempdir = tempfile.TemporaryDirectory( prefix = "task-" )

   configDir = os.environ[ 'HOME' ] + '/.config/tasks'
   cacheDir = os.environ[ 'HOME' ] + '/.cache/tasks'
   appCredentialsFile = configDir + GoogleTasks.appCredentialsFileName

   if not os.path.exists( configDir ):
      os.makedirs( configDir )
   if not os.path.exists( cacheDir ):
      os.makedirs( cacheDir )
   if not os.path.exists( appCredentialsFile ):
      raise RuntimeError( "no credentials file - see README.md#app-authentication",
                          appCredentialsFile )

   options = {}
   words = []
   criteria = Matcher.And()
   command = None
   args = { "tempdir" : tempdir.name }

   commandMap = {
         "add" : doTaskAdd,
         "list" : doTaskList,
         "edit" : doTaskEdit,
         "bulk" : doTasksBulk,
         "rename" : doTaskRename,
         "done" : doTaskDone,
         "undo" : doTaskUndo,
         "tag" : doTaskTag,
         "delete" : doTaskDelete,
         "project-add" : doProjectAdd,
         "project-list" : doProjectList,
         "project-rename" : doProjectRename,
         "project-delete" : doProjectDelete,
         }

   aliasMap = {
         "list" : [ "ls" ],
         "delete" : [ "rm", "del" ],
         "rename" : [ "mv" ],
         "project-list" : [ "project-ls" ],
         "project-delete" : [ "project-rm", "project-del" ],
         "project-rename" : [ "project-mv" ]
         }

   for commandToAlias, aliasList in aliasMap.items():
      for alias in aliasList:
         commandMap[ alias ] = commandMap[ commandToAlias ]

   argv = []
   wordMatchersComplete = False
   for arg in sys.argv:
      if wordMatchersComplete:
         argv.append( arg )
         continue

      if re.match( r"-", arg ):
         if arg == "--":
            wordMatchersComplete = True
            argv.append( arg )
         elif arg in optionMap:
            options[ optionMap[ arg ] ] = True
         else:
            print( "warning: option not recognised: %s" % arg, file=sys.stderr )
      else:
         argv.append( arg )

   if not argv:
      print( help )
      printSavedSearches( options, configDir + savedSearchFile )
      return 0

   commandName = argv.pop( 0 )
   if "project" in options and not re.match( "project-", commandName ):
      commandName = "project-" + commandName
   command = commandMap.get( commandName )

   if command is None:
      print( help )
      printSavedSearches( options, configDir + savedSearchFile )
      if command:
         print( "error: no such command: %s" % command, file=sys.stderr )
      return 1

   if "help" in options:
      # TODO - per-command help
      print( help )
      printSavedSearches( options, configDir + savedSearchFile )
      return 0

   wordMatchersComplete = command == doTaskAdd
   criteria.debug = "debugMatching" in options
   notMatcher = None

   if len( argv ) == 1 and command == doTaskList:
      searches = loadSavedSearches( configDir + savedSearchFile )
      savedArgv = searches.get( argv[ 0 ] )
      if savedArgv:
         argv = savedArgv

   for arg in argv:
      if arg == '--':
         wordMatchersComplete = True
      elif wordMatchersComplete:
         words.append( arg )
      elif arg == 'or' or arg == 'OR':
         if isinstance( criteria.parent, Matcher.Or ):
            orCriteria = criteria.parent
         else:
            orCriteria = Matcher.Or()
            orCriteria.debug = "debugMatching" in options
            orCriteria.add( criteria )
         criteria = Matcher.And()
         orCriteria.add(criteria )
      elif arg == 'not' or arg == 'NOT':
         if notMatcher:
            notMatcher = None
         else:
            notMatcher = Matcher.Not()
            notMatcher.debug = "debugMatching" in options
      else:
         if re.match( r"d(ue)?:", arg ):
            matcher = Task.DueMatcher( arg[ arg.index( ":" )+1 : ] )
         elif re.match( r"p(roject)?:", arg ):
            matcher = Project.WordMatcher( arg[ arg.index( ":" )+1 : ] )
         elif "project" in options:
            matcher = Project.WordMatcher( arg )
         else:
            matcher = Task.WordMatcher( arg )

         if notMatcher:
            notMatcher.add( matcher )
            matcher = notMatcher
            notMatcher = None
         criteria.add( matcher )

   while criteria.parent:
      criteria = criteria.parent

   taskApi = GoogleTasks( configDir, cacheDir )
   taskApi.authenticate()

   command( taskApi, options, criteria, words, args )

def getMatchingProjects( taskApi, options, criteria ):
   if criteria.hasInstanceOf( Task.TaskMatcher ):
      raise RuntimeError( "Cannot use task criteria with this action" )
   projects = taskApi.getProjects()
   match = []
   for project in projects:
      if "debugMatching" in options:
         print( "", file=sys.stderr )
         print( "Matching...", project, file=sys.stderr )
      if criteria.match( project ):
         if "debugMatching" in options:
            print( "%s:" % project.shortId, project.apiObject, file=sys.stderr )
         match.append( project )
   return match

def getMatchingProject( taskApi, options, criteria ):
   match = getMatchingProjects( taskApi, options, criteria )
   if len( match ) != 1:
      raise RuntimeError( "Matched %d project(s)" % len( match ) )
   return match[ 0 ]

def getMatchingTasks( taskApi, options, criteria ):
   projects = taskApi.getProjects()
   tasks = set()
   for project in projects:
      tasks |= project.matchingTasks( options, criteria )
   return tasks

def getMatchingTask( taskApi, options, criteria ):
   tasks = list( getMatchingTasks( taskApi, options, criteria ) )
   if len( tasks ) > 1 and "onlyComplete" in options:
      tasks = [ task for task in tasks if task.complete ]
   if len( tasks ) != 1:
      raise RuntimeError( "Matched %d task(s)" % len( tasks ) )
   return tasks[ 0 ]

def doTaskAdd( taskApi, options, criteria, words, args ):
   if criteria.hasInstanceOf( Task.TaskMatcher ):
      raise RuntimeError( "Cannot use task criteria with this action" )
   if not criteria.hasInstanceOf( Project.ProjectMatcher ):
      projectCriteria = [ Project.WordMatcher( "inbox" ) ]
   project = getMatchingProject( taskApi, options, criteria )
   task = project.newTask()
   task.title = " ".join( words )
   task.save()

def doTaskList( taskApi, options, criteria, words, args ):
   Project.write( taskApi.getProjects(), options, criteria )

def doTaskRename( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   if not words:
      raise RuntimeError( "No new title given (use -- to complete criteria)" )
   task.title = ' '.join( words )
   task.save()

def doTaskEdit( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   raise NotImplementedError( "doTasksEdit" )

def doTaskTag( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   # TODO: Add @TAG criteria, remove @-TAG criteria
   raise NotImplementedError( "doTasksTag" )

def doTasksBulk( taskApi, options, criteria, words, args ):
   helptext = '''#
# N.B. Comments only valid at top of file
# New project/task format:
#  * (p) Title
#  ** (t) [ ] [YYYY-MM-DD] Title
# To delete (deleting from the file ignores):
#  * (pXX) -
#  ** (tXXX) [-] ...
#'''
   allowed =( "verbose", )
   for key in options.keys():
      if key in ( "all", ):
         raise RuntimeError( "bulk: 'all' option would be too dangerous" )
      if key in allowed:
         continue
      raise RuntimeError( "bulk: %s not in allowed option list: %s" % ( key, allowed ) )
   if criteria.hasInstanceOf( Task.TaskMatcher ):
      raise RuntimeError( "Cannot use task criteria with this action" )

   if not criteria.hasInstanceOf( Project.ProjectMatcher ):
      options[ "includeEmptyProjects" ] = True

   projects = taskApi.getProjects()

   taskFilePath = args[ 'tempdir' ] + '/tasks.org'
   taskFile = open( taskFilePath, 'w')
   with open( taskFilePath, 'w' ) as taskFile:
      print( helptext, file=taskFile )
      Project.write( projects, options, criteria, outfile=taskFile )

   success = False
   while not success:
      subprocess.run( [ os.environ.get( 'EDITOR', 'vi' ), taskFilePath ] )
      try:
         print( "Working..." )
         with open( taskFilePath, 'r' ) as taskFile:
            Project.read( taskApi, options, infile=taskFile )
            success = True
      except Project.ParseError as ex:
         print( ex )
         input( "Press Enter to fix / Ctrl-C to abandon..." )

def doTaskDone( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   task.complete = True
   task.save()
   task.print( options=options )

def doTaskUndo( taskApi, options, criteria, words, args ):
   options[ "all" ] = True
   options[ "onlyComplete" ] = True
   task = getMatchingTask( taskApi, options, criteria )
   task.complete = False
   task.save()
   task.print( options=options )

def doTaskDelete( taskApi, options, criteria, words, args ):
   task = getMatchingTask( taskApi, options, criteria )
   task.print( options=options )
   task.delete()

def doProjectAdd( taskApi, options, criteria, words, args ):
   project = taskApi.newProject()
   project.title = " ".join( words )
   project.save()

def doProjectList( taskApi, options, criteria, words, args ):
   outfile = sys.stdout
   projects = getMatchingProjects( taskApi, options, criteria )
   for project in Project.Project.sort( projects ):
      project.print( options=options, outfile=outfile )

def doProjectRename( taskApi, options, criteria, words, args ):
   project = getMatchingProject( taskApi, options, criteria )
   if len( words ) < 1:
      raise RuntimeError( "No new name given" )
   project.title = ' '.join( words )
   project.save()

def doProjectDelete( taskApi, options, criteria, words, args ):
   def delProject( project, force ):
      if not force:
         print( "delete %s: %s? [y/N]" % ( project.shortId, project ), file=sys.stderr )
         return
      project.delete()
      print( "deleted: %s: %s" % ( project.shortId, project ), file=sys.stderr )

   if not criteria.hasInstanceOf( Project.ProjectMatcher ):
      raise RuntimeError( "must specify project id(s) or name(s)" )
   projects = getMatchingProjects( taskApi, options, criteria )
   for project in projects:
      delProject( project, "force" in options )

def printSavedSearches( options, savedSearchFilename ):
   print( "Saved searches (from %s):" % savedSearchFilename )
   searches = loadSavedSearches( savedSearchFilename )
   for key, args in searches.items():
      if "verbose" in options:
         print( "    %s: %s" % ( key, ' '.join( args ) ) )
      else:
         print( "    %s" % key )

def loadSavedSearches( savedSearchFilename ):
   defaultSavedSearches = [
      "NEXT"
      " @na NOT p:Admin OR @monitor NOT p:Admin OR due:today NOT p:Admin",
      "ADMIN"
      " @wait OR p:Admin @na OR p:Admin @monitor OR p:Admin due:today",
   ]
   if not os.path.exists( savedSearchFilename ):
      with open( savedSearchFilename, 'w' ) as savedSearchFile:
         print( "# Saved searches format", file=savedSearchFile )
         print( "# NAME terms...", file=savedSearchFile )
         for search in defaultSavedSearches:
            print( search, file=savedSearchFile )
   searches = {}
   with open( savedSearchFilename, 'r' ) as savedSearchFile:
      for line in savedSearchFile:
         if re.match( "^\s*#", line ):
            continue
         terms = re.split( "\s+", line.strip() )
         name = terms.pop( 0 )
         searches[ name ] = terms
   return searches

if __name__ == '__main__':
   program = sys.argv.pop( 0 )
   status = main( sys.argv )
   if not status:
      status = 0
   sys.exit( status )
